<script setup lang="ts">
import { defineAsyncComponent, shallowRef, watchEffect } from 'vue'

const props = defineProps<{
  name: string
  context?: any // Dynamischer Context f체r die Komponente & Condition
}>()

const blocks = {
  <%= Object.entries(options.blocks).map(([key, value]) => `'${key}': {
    component: defineAsyncComponent(() => import('${value.component}')),
    condition: ${value.condition ? value.condition : "null"},
  }`).join(",\n  ") %>,
}

// Zustand f체r die geladene Komponente
const selectedComponent = shallowRef(null)

// Pr체ft die Condition und l채dt ggf. die Komponente
const check = async () => {
  if (props.name in blocks) {
    const block = blocks[props.name]

    if (block.condition) {
      const conditionResult = await block.condition(props.context || {})
      if (!conditionResult) {
        selectedComponent.value = null
        return
      }
    }

    selectedComponent.value = block.component
  } else {
    selectedComponent.value = null
  }
}

await check()
watchEffect(check)
</script>

<template>
  <component :is="selectedComponent" v-if="selectedComponent" :context="context" />
  <slot v-else />
</template>
